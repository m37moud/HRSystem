import com.hrappv.data.models.DayDetails;
import com.hrappv.data.util.AbsentType;
import java.lang.String;
import java.time.LocalDate;
import kotlin.collections.List;

CREATE TABLE IF NOT EXISTS emp_result (
     emp_id	INTEGER REFERENCES employe (emp_id) ON DELETE RESTRICT ON UPDATE CASCADE,
	 depart_id	INTEGER REFERENCES Department (depart_id) ON DELETE RESTRICT ON UPDATE CASCADE,
--      name TEXT ,
--      department TEXT,
     month TEXT,
     year TEXT,
     numberOfAttendDays INTEGER AS Int,
     daysToCheckNoted TEXT,
     numberOfAbsentDays INTEGER AS Int ,
     totalPartTime REAL AS Double  ,
     partTimeDays TEXT,
     totalEarlyTime REAL AS Double,
     totalEarlyAccessTimeDays TEXT
--      ,absentDays TEXT
--      ,attendDays TEXT  AS List<String>


);

CREATE TABLE IF NOT EXISTS day_details (
     emp_id	INTEGER REFERENCES employe (emp_id) ON DELETE RESTRICT ON UPDATE CASCADE,
	 depart_id	INTEGER REFERENCES Department (depart_id) ON DELETE RESTRICT ON UPDATE CASCADE,
	 month TEXT,
     year TEXT,
     day TEXT ,
     wardia TEXT,
     typeOfDay TEXT,
     partTime REAL AS Double,
     earlyAccess TEXT,
     earlyAccessNote TEXT,
     notes TEXT
);


getAllDayDetails:
SELECT employe.fname AS empName, Department.department AS department_name,
day_details.day,day_details.month,day_details.year
,day_details.wardia,day_details.typeOfDay,day_details.partTime,
day_details.earlyAccess,day_details.earlyAccessNote , day_details.notes
FROM day_details
JOIN employe ON day_details.emp_id = employe.emp_id
JOIN Department ON day_details.depart_id = Department.depart_id
-- WHERE day_register.emp_id = ?
ORDER BY day_details.emp_id ASC ;


getAllDayDetailsById:
SELECT employe.fname AS empName, Department.department AS department_name,
day_details.day,day_details.month,day_details.year
,day_details.wardia,day_details.typeOfDay,day_details.partTime,
day_details.earlyAccess,day_details.earlyAccessNote , day_details.notes
FROM day_details
JOIN employe ON day_details.emp_id = employe.emp_id
JOIN Department ON day_details.depart_id = Department.depart_id
-- WHERE day_register.emp_id = ?
WHERE day_details.emp_id = (SELECT emp_id FROM employe WHERE fname = ?)
AND day_details.month = ?
AND day_details.year = ?

ORDER BY day_details.emp_id ASC ;



insertEmpDayDetails:
INSERT INTO day_details
VALUES ((SELECT emp_id FROM employe WHERE fname = ?), (SELECT depart_id FROM Department WHERE department = ?) ,?,?, ?,?,?,?,?,?,?) ;


insertEmpAbsentDay:
INSERT INTO Absense
VALUES ( ?,?, ?,(SELECT emp_id FROM employe WHERE fname = ?), (SELECT depart_id FROM Department WHERE department = ?)) ;


checkEmpAbsentDay:
SELECT *
FROM Absense
WHERE Absense.emp_id =  (SELECT emp_id FROM employe WHERE fname = ?)
AND Absense.absnt_date = ?
;

checkEmpDayDetail:
SELECT *
FROM day_details
WHERE day_details.emp_id =  (SELECT emp_id FROM employe WHERE fname = ?)
AND day_details.day = ?
AND day_details.month = ?
AND day_details.year = ?
;





getEmpResult:
SELECT employe.fname AS empName, Department.department AS department_name ,
emp_result.month,emp_result.year,numberOfAttendDays,daysToCheckNoted,numberOfAbsentDays,totalPartTime,
partTimeDays,totalEarlyTime,totalEarlyAccessTimeDays
-- ,absentDays
-- ,(SELECT * FROM day_details WHERE day_details.emp_id = (SELECT emp_id FROM employe WHERE fname = ?))
-- ,day_details.day,day_details.wardia,day_details.typeOfDay,
-- day_details.partTime,day_details.earlyAccess,day_details.earlyAccessNote , day_details.notes
FROM emp_result
JOIN employe ON emp_result.emp_id = employe.emp_id
JOIN Department ON emp_result.depart_id = Department.depart_id
-- JOIN day_details ON emp_result.emp_id = day_details.emp_id
-- WHERE day_register.emp_id = ?
ORDER BY emp_result.emp_id ASC ;


getEmpResultByMonthAndYear:
SELECT employe.fname AS empName, Department.department AS department_name ,
emp_result.month,emp_result.year,numberOfAttendDays,daysToCheckNoted,numberOfAbsentDays,totalPartTime,
partTimeDays,totalEarlyTime,totalEarlyAccessTimeDays
-- ,absentDays
FROM emp_result
JOIN employe ON emp_result.emp_id = employe.emp_id
JOIN Department ON emp_result.depart_id = Department.depart_id
-- JOIN day_details ON emp_result.emp_id = day_details.emp_id
WHERE emp_result.month = ?
AND emp_result.year = ?
ORDER BY emp_result.emp_id ASC ;



insertEmployeeResult:
INSERT INTO emp_result
VALUES ( (SELECT emp_id FROM employe WHERE fname = ?), (SELECT depart_id FROM Department WHERE department = ?),?,?,?,?,?,?,?,?,?);


checkEmpResult:
SELECT *
FROM emp_result
WHERE emp_result.emp_id =  (SELECT emp_id FROM employe WHERE fname = ?)
AND emp_result.month = ?
AND emp_result.year = ?;




checkIfnoEmployee:
SELECT count(1) WHERE EXISTS (SELECT * FROM employe);




