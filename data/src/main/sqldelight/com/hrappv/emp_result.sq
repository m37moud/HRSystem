import com.hrappv.data.models.DayDetails;
import java.lang.String;
import kotlin.collections.List;

CREATE TABLE IF NOT EXISTS emp_result (
     emp_id	INTEGER REFERENCES employe (emp_id) ON DELETE RESTRICT ON UPDATE CASCADE,
	 depart_id	INTEGER REFERENCES Department (depart_id) ON DELETE RESTRICT ON UPDATE CASCADE,
--      name TEXT ,
--      department TEXT,
     numberOfAttendDays INTEGER,
     daysToCheckNoted TEXT,
     numberOfAbsentDays INTEGER,
     totalPartTime REAL AS Double  ,
     partTimeDays TEXT,
     totalEarlyTime REAL AS Double,
     totalEarlyAccessTimeDays TEXT,
     absentDays TEXT
--      ,attendDays TEXT  AS List<String>


);



insertEmpDayDetails:
INSERT INTO day_details
VALUES ((SELECT emp_id FROM employe WHERE fname = ?), (SELECT depart_id FROM Department WHERE department = ?) , ?,?,?,?,?,?,?) ;


getEmpResult:
SELECT employe.fname AS empName, Department.department AS department_name ,
numberOfAttendDays,daysToCheckNoted,numberOfAbsentDays,totalPartTime,
partTimeDays,totalEarlyTime,totalEarlyAccessTimeDays,absentDays
-- ,(SELECT * FROM day_details WHERE day_details.emp_id = (SELECT emp_id FROM employe WHERE fname = ?))
-- ,day_details.day,day_details.wardia,day_details.typeOfDay,
-- day_details.partTime,day_details.earlyAccess,day_details.earlyAccessNote , day_details.notes
FROM emp_result
JOIN employe ON emp_result.emp_id = employe.emp_id
JOIN Department ON emp_result.depart_id = Department.depart_id
JOIN day_details ON emp_result.emp_id = day_details.emp_id
-- WHERE day_register.emp_id = ?
ORDER BY emp_result.emp_id ASC ;


insertEmployeeResult:
INSERT INTO emp_result
VALUES ( (SELECT emp_id FROM employe WHERE fname = ?), (SELECT depart_id FROM Department WHERE department = ?),?,?,?,?,?,?,?,?);

